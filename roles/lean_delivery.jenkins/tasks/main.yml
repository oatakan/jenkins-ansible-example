---
# tasks file for ansible-role-jenkins
- name: Include variables
  ansible.builtin.include_vars: "{{ os_distribution_type }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      errors: ignore
  loop_control:
    loop_var: os_distribution_type

- name: Choose platform based task
  ansible.builtin.include_tasks: "{{ platform }}"
  with_first_found:
    - files:
        - "system/{{ ansible_os_family }}.yml"
      errors: ignore
  loop_control:
    loop_var: platform

- name: Prepare
  become: true
  block:
    - name: Install requirements
      ansible.builtin.package:
        name: "{{ jenkins_requirements }}"
        state: present
      register: status
      until: status is succeeded

    - name: Upgrade pip
      ansible.builtin.pip:
        name:
          - pip
        state: present
        extra_args: --upgrade
        executable: "pip{{ ansible_facts.python.version.major }}"
      register: installed_packages
      until: installed_packages is success

    - name: Install pip packages
      ansible.builtin.pip:
        name:
          - pyOpenSSL
          - python-jenkins
          - lxml
        state: present
        executable: "pip{{ ansible_facts.python.version.major }}"
      register: installed_packages
      until: installed_packages is success

    - name: Create group
      ansible.builtin.group:
        name: '{{ jenkins2_user | default("jenkins") }}'
        state: present

    - name: Create user
      ansible.builtin.user:
        name: '{{ jenkins2_user | default("jenkins") }}'
        group: '{{ jenkins2_user | default("jenkins") }}'
        shell: /bin/bash
        home: "{{ jenkins2_home_directory }}"

- name: SSL preparation
  ansible.builtin.include_tasks: "{{ platform }}"
  with_first_found:
    - "ssl/{{ ansible_system }}.yml"
    - "system/not-supported.yml"
  loop_control:
    loop_var: platform
  when:
    - jenkins2_ssl_configure | bool

- name: Create symlink
  ansible.builtin.file:
    src: "{{ jenkins2_home_directory }}"
    dest: /var/lib/jenkins
    owner: '{{ jenkins2_user | default("jenkins") }}'
    group: '{{ jenkins2_user | default("jenkins") }}'
    state: link
  become: true
  when: jenkins2_home_directory != '/var/lib/jenkins'

- name: Jenkins repository install
  ansible.builtin.include_tasks: "{{ platform }}"
  with_first_found:
    - "repository_install/{{ ansible_os_family }}.yml"
    - "repository_install/not-supported.yml"
  loop_control:
    loop_var: platform

- name: Create custom init scripts directory.
  ansible.builtin.file:
    path: "{{ jenkins2_home_directory }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins2_process_user }}"
    group: "{{ jenkins2_process_group }}"
    mode: "0775"

- name: Jenkins Installation
  ansible.builtin.package:
    name: "{{ jenkins2_package_version }}"
    state: present
  register: jenkins_was_installed
  until: jenkins_was_installed is succeeded
  become: true
  notify:
    - Configure default users

- name: Apply Jenkins configuration file
  ansible.builtin.template:
    src: "{{ ansible_os_family }}_configuration.j2"
    dest: "{{ jenkins_config_service_path }}"
    owner: root
    group: root
    mode: "0644"
    backup: true
  become: true
  notify:
    - Restart Jenkins

# for some reason java_opts doesn't get updated from the config file
- name: Make sure java opts set correctly on the service
  ansible.builtin.replace:
    path: "{{ jenkins_systemd_unit_file }}"
    regexp: '^(Environment=\"JAVA_OPTS=).*(\")$'
    replace: "\\1{{ jenkins2_config_java_options }}\\2"
  notify:
    - Reload Jenkins Service

- name: Jenkins configuration
  ansible.builtin.include_tasks: "{{ platform }}"
  with_first_found:
    - "configure/{{ ansible_os_family }}.yml"
    - "configure/not-supported.yml"
  loop_control:
    loop_var: platform
  when:
    - jenkins_was_installed is defined
    - jenkins_was_installed.changed | bool

- name: Trigger handlers immediately in case Jenkins was installed
  ansible.builtin.meta: flush_handlers

- name: Include plugin installation tasks
  ansible.builtin.include_tasks: install_plugins.yml
  when: jenkins_was_installed is defined | bool

- name: Include SMTP configuration tasks
  ansible.builtin.include_tasks: configure_smtp.yml
  when: jenkins2_smtp_enabled | bool

- name: Include credentials setting tasks
  ansible.builtin.include_tasks: set_credentials.yml
  when: jenkins2_credentials_enabled | bool

- name: Include pipeline libraries configuration tasks
  ansible.builtin.include_tasks: configure_pipeline_libraries.yml
  when: jenkins2_pipeline_libraries_enabled | bool

- name: Include Bitbucket project configuration tasks
  ansible.builtin.include_tasks: configure_bitbucket_project.yml
  when: jenkins2_bitbucket_project_enabled | bool

- name: Include SonarQube configuration tasks
  ansible.builtin.include_tasks: configure_sonarqube.yml
  when: jenkins2_sonarqube_enabled | bool

- name: Include Jira configuration tasks
  ansible.builtin.include_tasks: configure_jira.yml
  when: jenkins2_jira_enabled | bool

- name: Include custom files copying tasks
  ansible.builtin.include_tasks: copy_custom_files.yml
  when: jenkins2_custom_files_enabled | bool

- name: Include GitLab configuration tasks
  ansible.builtin.include_tasks: configure_gitlab.yml
  when: jenkins2_gitlab_enabled | bool

- name: Include GitHub configuration tasks
  ansible.builtin.include_tasks: configure_github.yml
  when: jenkins2_github_enabled | bool

- name: Include new jobs adding tasks
  ansible.builtin.include_tasks: add_new_jobs.yml
  when: jenkins2_seed_job_enable | bool

- name: Include EC2 configuration tasks
  ansible.builtin.include_tasks: configure_ec2.yml
  when: jenkins2_ec2_enable | bool

- name: Include SSH keys configuration tasks
  ansible.builtin.include_tasks: configure_ssh_keys.yml
  when: jenkins2_ssh_keys_slave_group_exist and jenkins2_ssh_keys_generate and jenkins_was_installed is defined and jenkins_was_installed is changed

- name: Include security configuration tasks
  ansible.builtin.include_tasks: configure_security.yml
  when: jenkins2_security_enable | bool

- name: Include global tools configuration tasks
  ansible.builtin.include_tasks: configure_globaltools.yml
  when: jenkins2_globaltools_enable | bool

- name: Disable insecure connection
  ansible.builtin.set_fact:
    jenkins2_config_http_port: "-1"
    jenkins2_config_proto: https
  when: jenkins2_http_disabled | bool

- name: Apply Jenkins configuration file and check HTTPS
  ansible.builtin.template:
    src: "{{ ansible_os_family }}_configuration.j2"
    dest: /etc/{{ (ansible_os_family == "Debian") | ternary('default', 'sysconfig') }}/jenkins
    owner: root
    group: root
    mode: "0644"
    backup: true
  become: true
  notify:
    - Restart Jenkins with HTTPS
  when: jenkins2_https_enabled | bool
